#!/usr/bin/env awk-f

function snip(key, value) {
  if (value == "") {
    print "missing value for key:", key > "/dev/stderr"
    exit 1
  }
  if (snippets[key]) {
    print "duplicate key:", key > "/dev/stderr"
    exit 1
  }
  snippets[key] = value
}

# current max: 4
function cycle(key, v1, v2, v3, v4) {
  delete parts
  if (v1 != "") parts[1] = v1
  if (v2 != "") parts[2] = v2
  if (v3 != "") parts[3] = v3
  if (v4 != "") parts[4] = v4
  len = length(parts)
  parts[len+1] = parts[1]
  for (i = 1; i <= len; i++) {
    snip(key ":" parts[i], parts[i+1])
  }
}

BEGIN {
  # prefixes
  split(filetype, pre, ".")
  pre[length(pre)+1] = "*"

  #-------------------------------------------------
  # global
  #-------------------------------------------------
  snip("*:--",   "-------------------------------------------------")
  snip("*:isod", strftime("%F"))
  snip("*:td",   strftime("%F -- %A"))
  snip("*:ts",   strftime("%s"))

  # lorem ipsum filler text
  snip("*:lorem", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras vitae efficitur sapien. Cras dictum auctor mattis. Morbi sed interdum metus. Curabitur sit amet eros in urna volutpat porta vel eget lacus. Praesent a rhoncus purus. Nullam purus erat, fermentum sit amet turpis et, consectetur rutrum ante. Suspendisse pharetra in felis vitae blandit. Suspendisse potenti. Cras vestibulum nibh nec scelerisque ullamcorper.")

  # unicode
  snip("*:cr",   "⏎")
  snip("*:->",   "→")
  snip("*:=>",   "⇨")
  snip("*:<->",  "⇆")
  snip("*:+-",   "±")
  cycle("*",     "*", "×", "⋅")
  snip("*:/",    "÷")
  snip("*:>=",   "≥")
  snip("*:<=",   "≤")
  snip("*:cmd",  "⌘")
  snip("*:alt",  "⌥")

  # emojis
  cycle("*",        "_", "📦", "✅")
  snip("*::think",  "🤔")
  snip("*::grim",   "😬")
  snip("*::grin",   "😄")
  snip("*::clock",  "⏰")
  snip("*::time",   "⏳")
  snip("*:O",       "🔆")
  snip("*:X",       "❌")
  snip("*:!",       "⚠️")
  snip("*::tada",   "🎉")
  snip("*::fire",   "🔥")
  snip("*::boom",   "💥")
  snip("*::rot",    "🔄")
  snip("*::shrug",  "¯\\_(ツ)_/¯")

  # fruit
  srand()
  fruits = "🍇🍈🍉🍊🍋🍌🍍🥭🍎🍏🍐🍑🍒🍓🫐🥝"
  fruit = substr(fruits, int(length(fruits) * rand()), 1)
  snip("*:%", fruit)

  # spanish accents
  snip("*:a'", "á")
  snip("*:i'", "í")
  snip("*:u'", "ú")
  snip("*:e'", "é")
  snip("*:o'", "ó")
  snip("*:n~", "ñ")

  # french accents: `
  snip("*:a`", "à")
  snip("*:u`", "ù")
  snip("*:e`", "è")
  # french accents: :
  snip("*:i:", "ï")
  snip("*:u:", "ü")
  snip("*:e:", "ë")
  # french accents: ^
  snip("*:a^", "â")
  snip("*:i^", "î")
  snip("*:u^", "û")
  snip("*:e^", "ê")
  snip("*:o^", "ô")

  #-------------------------------------------------
  # javascript
  #-------------------------------------------------
  n = split("javascript typescript", arr)
  for (i = 1; i <= n; i++) {
    snip(arr[i] ":fn",   "function ▒() {\n}")
    snip(arr[i] ":fori", "for (let i = 0; i < ▒; i += 1) {")
    snip(arr[i] ":fe",   "forEach(▒)")
    snip(arr[i] ":iife", "(() => {\n▒\n})();")
  }

  #-------------------------------------------------
  # r and rmd
  #-------------------------------------------------
  n = split("r rmd", arr)
  for (i = 1; i <= n; i++) {
    snip(arr[i] ":in", "%in%")
    snip(arr[i] ":fn", "function")
    snip(arr[i] ":|",  "%>%")
    snip(arr[i] ":>",  "%>%")
    snip(arr[i] ":_",  ".Last.value");
  }
  snip("rmd:```",  "```{r}\n\n▒\n\n```");

  #-------------------------------------------------
  # elixir
  #-------------------------------------------------
  snip("elixir:_m",    "__MODULE__")
  snip("elixir:defm",  "defmodule")
  snip("elixir::clal", "charlists: :as_lists")
  snip("elixir:pry",   "require IEx; IEx.pry()")
  snip("elixir:inf",   "infinity")
  snip("elixir:tc",    "{usec, result} = :timer.tc(fn -> ▒ end)")
  cycle("elixir",      "@", "@tag :", "@tag :focus")
  cycle("elixir",      "IO.", "IO.inspect()", "IO.inspect(label: \"***** #{Path.relative_to_cwd(__ENV__.file)}:#{__ENV__.line}\")")
  #-------------------------------------------------
  # eex
  #-------------------------------------------------
  snip("eelixir:_", "<%= ▒ %>")
  cycle("eelixir",  "<%= ", "<%# ", "<% ")

  #-------------------------------------------------
  # gleam
  #-------------------------------------------------
  snip("gleam:im",  "import gleam/")
  snip("gleam:fn",  "fn (▒) {}")
  snip("gleam:dbg", "io.debug()")

  #-------------------------------------------------
  # zig
  #-------------------------------------------------
  snip("zig:std", "const std = @import(\"std\");")

  #-------------------------------------------------
  # elm
  #-------------------------------------------------
  snip("elm:letin", "let _ = ▒ in")
  snip("elm:log",   "Debug.log \"label\"")
  snip("elm:if",    "if ▒ then True else False")

  #-------------------------------------------------
  # sql
  #-------------------------------------------------
  snip("sql:ea",   "EXPLAIN ANALYZE")
  snip("sql:cte",  "WITH results AS (\n▒\n-- ), other_results AS (\n)\nSELECT * FROM results WHERE ...")
  snip("sql:csv",  "\\copy (SELECT * FROM table) to 'table.csv' with csv header")
  snip("sql:psql", "\\pset pager off\n\\pset null NULL\n\\x auto")

  #-------------------------------------------------
  # gitcommit
  #-------------------------------------------------
  snip("gitcommit:ud", "Update dependencies")
  snip("gitcommit:cab", "Co-authored-by: ")

  #-------------------------------------------------
  # graphviz: dot
  #-------------------------------------------------
  snip("dot:sg", "subgraph cluster_ts")

  #-------------------------------------------------
  # markdown
  #-------------------------------------------------
  snip("markdown:a",     "[alt](url)")
  snip("markdown:img",   "![alt](url)")
  snip("markdown:img-a", "[![alt](url)](url)")
  snip("markdown:hl",     "{% highlight ▒ %}\n{% endhighlight %}")

  #-------------------------------------------------
  # deck
  #-------------------------------------------------
  snip("deck:ja", "<span lang=\"ja\">")
}

#-------------------------------------------------

# try to match from the right
# try ft-specific first, global next
{
  for (i = length($0); i > 0; i--) {
    ss = substr($0, i)
    for (j = 1; j <= length(pre); j++) {
      key = pre[j] ":" ss
      if (key in snippets) {
        print substr($0, 1, i-1) snippets[key]
        exit
      }
    }
  }
}

# no match, print as-is
{
  print
}
