#!/usr/bin/env awk-f

function snip(key, value) {
  if (value == "") {
    print "missing value for key:", key > "/dev/stderr"
    exit 1
  }
  if (snippets[key]) {
    print "duplicate key:", key > "/dev/stderr"
    exit 1
  }
  snippets[key] = value
}

BEGIN {
  # prefixes
  split(filetype, pre, ".")
  pre[length(pre)+1] = "*"

  #-------------------------------------------------
  # global
  #-------------------------------------------------
  snip("*:--",   "-------------------------------------------------")
  snip("*:isod", strftime("%F"))
  snip("*:ts",   strftime("%s"))
  snip("*:?",    "‚ùì")
  snip("*:O",    "üîÜ")
  snip("*:‚àö",    "‚úÖ")
  snip("*:x",    "‚ùå")
  snip("*:!",    "‚ö†Ô∏è")
  snip("*:<3",   "‚ù§Ô∏è")
  snip("*:cr",   "‚èé")
  snip("*:->",   "‚Üí")
  snip("*:=>",   "‚á®")
  snip("*:<->",  "‚áÜ")
  snip("*:+-",   "¬±")
  snip("*:*",    "√ó")
  snip("*:√ó",    "‚ãÖ")
  snip("*:/",    "√∑")
  snip("*:cmd",  "‚åò")
  snip("*:alt",  "‚å•")

  # spanish accents
  snip("*:a'", "√°")
  snip("*:i'", "√≠")
  snip("*:u'", "√∫")
  snip("*:u:", "√º")
  snip("*:e'", "√©")
  snip("*:o'", "√≥")
  snip("*:n~", "√±")

  # emojis
  snip("*::think",  "ü§î")

  #-------------------------------------------------
  # javascript
  #-------------------------------------------------
  snip("javascript:fn",       "function ‚ñí() {\n}")
  snip("javascript:fori",     "for (let i = 0; i < ‚ñí; i += 1) {")
  snip("javascript:fe",       "forEach(‚ñí)")
  snip("javascript:fn-",      "(‚ñí) => {}")
  snip("javascript:iife",     "(() => {\n‚ñí\n})();")
  snip("javascript:eslint",   "/* eslint-disable no-console */")
  snip("javascript:eslint-",  "// eslint-disable-next-line no-console")

  #-------------------------------------------------
  # r and rmd
  #-------------------------------------------------
  snip("r:fn", "function")
  snip("r:|",  "%>%")
  snip("r:>",  "%>%")
  snip("r:_",  ".Last.value");
  snip("r:#h", "#-------------------------------------------------\n# ‚ñíname\n#-------------------------------------------------");
  for (k in snippets) {
    if (k !~ /^r:/) { continue }
    v = snippets[k]
    sub("r:", "rmd:", k)
    snippets[k] = v
  }
  snip("rmd:```",  "```{r}\n\n‚ñí\n\n```");

  #-------------------------------------------------
  # go
  #-------------------------------------------------
  snip("go:fn",          "func ‚ñí() {\n}")
  snip("go:fori",        "for i := 0; i < ‚ñí; i++ {}")
  snip("go:forr",        "for i, _ := range ‚ñí {}")
  snip("go:iferr",       "if err != nil { return err }")
  snip("go:handler",     "func(res http.ResponseWriter, req *http.Request)")
  # loop {
  snip("go:fmt.",        "fmt.Println")
  snip("go:fmt.Println", "fmt.Printf")
  snip("go:fmt.Printf",  "fmt.")
  # }

  #-------------------------------------------------
  # elixir
  #-------------------------------------------------
  snip("elixir:defm", "defmodule")
  snip("elixir:gs",   "GenServer")
  # loop {
  snip("eelixir:_", "<%=‚ñí %>")
  snip("eelixir:<%=", "<%#")
  snip("eelixir:<%#", "<%")
  snip("eelixir:<%", "<%=")
  # }
}

#-------------------------------------------------

# try to match from the right
# try ft-specific first, global next
# try to find longest match
{
  _i = -1
  _text = ""
  for (i = length($0); i > 0; i--) {
    ss = substr($0, i)
    for (j = 1; j <= length(pre); j++) {
      text = snippets[pre[j] ":" ss]
      if (text) {
        _i = i
        _text = text
        break
      }
    }
  }
  if (_text) {
      print substr($0, 1, _i-1) _text
      next
  }
}

# no match, print as-is
{
  print
}
