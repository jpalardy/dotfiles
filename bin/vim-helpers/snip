#!/usr/bin/env awk-f

function randhex(len) {
  hex_chars = "0123456789abcdef"
  result = ""
  for (i = 1; i <= len; i++) {
    result = result substr(hex_chars, int(rand() * 16) + 1, 1)
  }
  return result
}

function snip(key, value, overwrite) {
  if (value == "") {
    print "missing value for key:", key > "/dev/stderr"
    exit 1
  }
  if (snippets[key] && overwrite != 1) {
    print "duplicate key:", key > "/dev/stderr"
    exit 1
  }
  snippets[key] = value
}

# current max: 4
function cycle(v1, v2, v3, v4) {
  delete parts
  if (v1 != "") parts[1] = v1
  if (v2 != "") parts[2] = v2
  if (v3 != "") parts[3] = v3
  if (v4 != "") parts[4] = v4
  len = length(parts)
  parts[len+1] = parts[1]
  for (i = 1; i <= len; i++) {
    snip(parts[i], parts[i+1])
  }
}

BEGIN {
  # fresh seed
  srand()

  # filetype comes from -v
  split(filetype, arr, ".")
  for (i in arr) {
    filetypes[arr[i]] = 1
  }

  #-------------------------------------------------
  # global
  #-------------------------------------------------
  snip("--", "-------------------------------------------------")
  cycle("td", strftime("%F"), strftime("%F -- %A"))
  snip("yd", strftime("%F", systime() - 86400))
  snip("ts", strftime("%s"))

  # lorem ipsum filler text
  snip("lorem", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras vitae efficitur sapien. Cras dictum auctor mattis. Morbi sed interdum metus. Curabitur sit amet eros in urna volutpat porta vel eget lacus. Praesent a rhoncus purus. Nullam purus erat, fermentum sit amet turpis et, consectetur rutrum ante. Suspendisse pharetra in felis vitae blandit. Suspendisse potenti. Cras vestibulum nibh nec scelerisque ullamcorper.")

  # unicode
  snip("cr",  "⏎")
  snip("cmd", "⌘")
  snip("alt", "⌥")
  snip("*",   "×")

  # emojis
  cycle("_", "📦", "✅")
  snip(":think",  "🤔")
  snip(":grim",   "😬")
  snip(":grin",   "😄")
  snip("+1",      "👍")
  snip("X",       "❌")
  snip(":tada",   "🎉")
  snip(":fire",   "🔥")
  snip(":boom",   "💥")
  snip(":rot",    "🔄")
  snip(":skull",  "💀")
  snip("@",       "🌀")
  snip(":shrug",  "¯\\_(ツ)_/¯")

  # fruit
  fruits = "🍎🍏🍌🫐🍒🍇🥝🍋🍊🍑🍍🍓🍉"
  fruit = substr(fruits, int(length(fruits) * rand()), 1)
  snip("%", fruit)
  snip("%%", "🍓")
  for (i = 0; i < length(fruits); i++) {
    snip(substr(fruits, i + 1, 1), substr(fruits, (i + 1) % length(fruits) + 1, 1))
  }

  # spanish accents
  snip("a'", "á")
  snip("i'", "í")
  snip("u'", "ú")
  snip("e'", "é")
  snip("o'", "ó")
  snip("n~", "ñ")

  # french accents: `
  snip("a`", "à")
  snip("u`", "ù")
  snip("e`", "è")
  # french accents: :
  snip("i:", "ï")
  snip("u:", "ü")
  snip("e:", "ë")
  # french accents: ^
  snip("a^", "â")
  snip("i^", "î")
  snip("u^", "û")
  snip("e^", "ê")
  snip("o^", "ô")

  #-------------------------------------------------
  # javascript
  #-------------------------------------------------
  if ("typescript" in filetypes) {
    filetypes["javascript"] = 1
  }
  if ("javascript" in filetypes) {
    snip("fn",   "function ▒() {\n}")
    snip("fori", "for (let i = 0; i < ▒; i += 1) {")
    snip(".fe",  ".forEach(▒)")
    snip("iife", "(() => {\n▒\n})();")
  }

  #-------------------------------------------------
  # r and rmd
  #-------------------------------------------------
  if ("rmd" in filetypes) {
    filetypes["r"] = 1
    snip("rmd", "```", "```{r}\n\n▒\n\n```");
  }
  if ("r" in filetypes) {
    snip("in", "%in%")
    snip("fn", "function")
    snip("|",  "%>%")
    snip(">",  "%>%")
  }

  #-------------------------------------------------
  # elixir
  #-------------------------------------------------
  if ("elixir" in filetypes) {
    snip(":clal", "charlists: :as_lists")
    snip("pry",   "require IEx; IEx.pry()")
    snip("inf",   "infinity")
    snip("tc",    "{usec, result} = :timer.tc(fn -> ▒ end)")
    snip("!",     "raise \"" randhex(8) "\"")
    snip("__",    "IO.puts(\"** stacktrace " randhex(8) "\\n\" <> Exception.format_stacktrace())")
    cycle("@:",   "@tag :k", "@tag k: v")
    cycle("IO.",  "IO.inspect()", "IO.inspect(label: \"***** #{Path.relative_to_cwd(__ENV__.file)}:#{__ENV__.line}\")")
  }

  #-------------------------------------------------
  # eex
  #-------------------------------------------------
  if ("eelixir" in filetypes) {
    snip("_", "<%= ▒ %>")
    cycle("<%= ", "<%# ", "<% ")
  }

  #-------------------------------------------------
  # zig
  #-------------------------------------------------
  if ("zig" in filetypes) {
    snip("std", "const std = @import(\"std\");")
  }

  #-------------------------------------------------
  # elm
  #-------------------------------------------------
  if ("elm" in filetypes) {
    snip("letin", "let _ = ▒ in")
    snip("log",   "Debug.log \"label\"")
    snip("if",    "if ▒ then True else False")
  }

  #-------------------------------------------------
  # sql
  #-------------------------------------------------
  if ("sql" in filetypes) {
    cycle("ea", "EXPLAIN ANALYZE", "EXPLAIN (ANALYZE, BUFFERS)")
    snip("cte",  "WITH results AS (\n▒\n-- ), other_results AS (\n)\nSELECT * FROM results WHERE ...")
    snip("csv",  "\\copy (SELECT * FROM table) to 'table.csv' with csv header")
    snip("psql", "\\pset pager off\n\\pset null NULL\n\\x auto")
    cycle("format", "\\pset format wrapped", "\\pset format aligned")
    snip("ssf",  "SELECT * FROM ")
    snip("scf",  "SELECT count(*) FROM ")
    snip("sccf", "SELECT _column_, count(*) FROM ▒ GROUP BY 1 ORDER BY 1")
    snip("lim",  "LIMIT 15")
  }

  #-------------------------------------------------
  # gitcommit
  #-------------------------------------------------
  if ("gitcommit" in filetypes) {
    snip("ud", "Update dependencies")
    snip("cab", "Co-authored-by: ")
  }

  #-------------------------------------------------
  # graphviz: dot
  #-------------------------------------------------
  if ("dot" in filetypes) {
    snip("sg", "subgraph cluster_" strftime("%s"))
  }

  #-------------------------------------------------
  # markdown
  #-------------------------------------------------
  if ("markdown" in filetypes) {
    snip("a",   "[alt](url)")
    snip("img", "[![alt](url)](url)")
  }

  #-------------------------------------------------
  # deck
  #-------------------------------------------------
  if ("deck" in filetypes) {
    snip("ja", "<span lang=\"ja\">")
  }

  #-------------------------------------------------
  # debug: show all snippets
  #-------------------------------------------------
  if (debug) {
    for (k in snippets) {
      print k "\t" snippets[k]
    }
    exit
  }
}

#-------------------------------------------------

# start with original line
# - match from the right
# - longer matches win
{
  line = $0
  for (i = length($0); i > 0; i--) {
    ss = substr($0, i)
    if (ss in snippets) {
      line = substr($0, 1, i-1) snippets[ss]
    }
  }
  print line
}
