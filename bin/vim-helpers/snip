#!/usr/bin/env awk-f

function snip(key, value) {
  if (value == "") {
    print "missing value for key:", key > "/dev/stderr"
    exit 1
  }
  if (snippets[key]) {
    print "duplicate key:", key > "/dev/stderr"
    exit 1
  }
  snippets[key] = value
}

# current max: 4
function cycle(key, v1, v2, v3, v4) {
  delete parts
  if (v1 != "") parts[1] = v1
  if (v2 != "") parts[2] = v2
  if (v3 != "") parts[3] = v3
  if (v4 != "") parts[4] = v4
  len = length(parts)
  parts[len+1] = parts[1]
  for (i = 1; i <= len; i++) {
    snip(key ":" parts[i], parts[i+1])
  }
}

BEGIN {
  # prefixes
  split(filetype, pre, ".")
  pre[length(pre)+1] = "*"

  #-------------------------------------------------
  # global
  #-------------------------------------------------
  snip("*:--",   "-------------------------------------------------")
  snip("*:isod", strftime("%F"))
  snip("*:dn",   strftime("%A"))
  snip("*:td",   strftime("%F -- %A"))
  snip("*:ts",   strftime("%s"))

  # unicode
  snip("*:cr",   "⏎")
  snip("*:->",   "→")
  snip("*:=>",   "⇨")
  snip("*:<->",  "⇆")
  snip("*:+-",   "±")
  cycle("*",     "*", "×", "⋅")
  snip("*:/",    "÷")
  snip("*:>=",   "≥")
  snip("*:<=",   "≤")
  snip("*:cmd",  "⌘")
  snip("*:alt",  "⌥")

  # emojis
  cycle("*",        "_", "📦", "✅")
  snip("*::think",  "🤔")
  snip("*::clock",  "⏰")
  snip("*:?",       "❓")
  snip("*:O",       "🔆")
  snip("*:x",       "❌")
  snip("*:!",       "⚠️")
  snip("*:<3",      "❤️")

  # spanish accents
  snip("*:a'", "á")
  snip("*:i'", "í")
  snip("*:u'", "ú")
  snip("*:u:", "ü")
  snip("*:e'", "é")
  snip("*:o'", "ó")
  snip("*:n~", "ñ")

  #-------------------------------------------------
  # javascript
  #-------------------------------------------------
  n = split("javascript typescript", arr)
  for (i = 1; i <= n; i++) {
    snip(arr[i] ":fn",   "function ▒() {\n}")
    snip(arr[i] ":fori", "for (let i = 0; i < ▒; i += 1) {")
    snip(arr[i] ":fe",   "forEach(▒)")
    snip(arr[i] ":iife", "(() => {\n▒\n})();")
  }

  #-------------------------------------------------
  # r and rmd
  #-------------------------------------------------
  n = split("r rmd", arr)
  for (i = 1; i <= n; i++) {
    snip(arr[i] ":fn", "function")
    snip(arr[i] ":|",  "%>%")
    snip(arr[i] ":>",  "%>%")
    snip(arr[i] ":_",  ".Last.value");
    snip(arr[i] ":#h", "#-------------------------------------------------\n# ▒name\n#-------------------------------------------------");
  }
  snip("rmd:```",  "```{r}\n\n▒\n\n```");

  #-------------------------------------------------
  # go
  #-------------------------------------------------
  snip("go:fn",      "func ▒() {\n}")
  snip("go:fori",    "for i := 0; i < ▒; i++ {}")
  snip("go:forr",    "for i, _ := range ▒ {}")
  snip("go:iferr",   "if err != nil { return err }")
  snip("go:handler", "func(res http.ResponseWriter, req *http.Request)")
  cycle("go",        "fmt.", "fmt.Println", "fmt.Printf")

  #-------------------------------------------------
  # elixir
  #-------------------------------------------------
  snip("elixir:defm",  "defmodule")
  snip("elixir:tap",   "IO.inspect()")
  snip("elixir:tapl",  "IO.inspect(label: \"▒\")")
  snip("elixir::clal", "charlists: :as_lists")
  snip("elixir:pry",   "require IEx; IEx.pry()")
  #-------------------------------------------------
  # eex
  #-------------------------------------------------
  snip("eelixir:_", "<%= ▒ %>")
  cycle("eelixir",  "<%= ", "<%# ", "<% ")

  #-------------------------------------------------
  # elm
  #-------------------------------------------------
  snip("elm:letin", "let _ = ▒ in")
  snip("elm:log",   "Debug.log \"label\"")
  snip("elm:if",    "if ▒ then True else False")

  #-------------------------------------------------
  # sql
  #-------------------------------------------------
  snip("sql:ea", "EXPLAIN ANALYZE")
}

#-------------------------------------------------

# try to match from the right
# try ft-specific first, global next
# try to find longest match
{
  _i = -1
  _text = ""
  for (i = length($0); i > 0; i--) {
    ss = substr($0, i)
    for (j = 1; j <= length(pre); j++) {
      text = snippets[pre[j] ":" ss]
      if (text) {
        _i = i
        _text = text
        break
      }
    }
  }
  if (_text) {
      print substr($0, 1, _i-1) _text
      next
  }
}

# no match, print as-is
{
  print
}
